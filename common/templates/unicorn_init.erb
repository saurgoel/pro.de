#! /bin/sh
# File: /etc/init.d/unicorn
set -e

# Feel free to change any of the following variables for your app:
TIMEOUT=${TIMEOUT-60}
BASE_ROOT=/srv/www/amber
PID=$BASE_ROOT/shared/tmp/unicorn.pid
APP_ROOT=$BASE_ROOT/current
CMD="cd $APP_ROOT; bundle exec unicorn -c $BASE_ROOT/unicorn.rb -E production -D"
AS_USER=deployer
set -u

OLD_PIN="$PID.oldbin"

sig () {
  test -s "$PID" && kill -$1 `cat $PID`
}

oldsig () {
  test -s $OLD_PIN && kill -$1 `cat $OLD_PIN`
}

run () {
  if [ "$(id -un)" = "$AS_USER" ]; then
    eval $1
  else
    su - $AS_USER -c "$1"
  fi
}

case "$1" in
# Start the process by testing if it's there (sig 0), failing if it is,
# otherwise running the command as specified above.
start)
  sig 0 && echo >&2 "Already running" && exit 0
  run "$CMD"
  ;;

# Graceful shutdown. Send QUIT signal to the process. Requests will be
# completed before the processes are terminated.
stop)
  sig QUIT && echo "Stopping" && exit 0
  echo >&2 "Not running"
  ;;

# Quick shutdown - kills all workers immediately.
force-stop)
  sig TERM && echo "Force Stop" && exit 0
  echo >&2 "Not running"
  ;;

# Graceful shutdown and then start.
restart)
  sig QUIT && echo "Restarting" && sleep 2 && run "$CMD" && exit 0
  echo >&2 "Couldn't restart."
  ;;

# Reloads config file (unicorn.rb) and gracefully restarts all workers. This command won't pick up application code changes if you have `preload_app true` in your unicorn.rb config file.
# Preloads config file and gracefully restart all workers. If the “preload_app” directive is false (the default), then workers will # also pick up any application code changes when restarted. If “preload_app” is true, then application code changes will have no effect.
reload)
  sig HUP && echo "Reloading configuration" && exit 0
  echo >&2 "Couldn't reload, starting '$CMD' instead"
  run "$CMD"
  ;;

# Re-execute the running binary, then gracefully shutdown old process. This
# command allows you to have zero-downtime deployments. The application may
# spin for a minute, but at least the user doesn't get a 500 error page or
# the like. Unicorn interprets the USR2 signal as a request to start a new
# master process and phase out the old worker processes. If the upgrade fails
# for some reason, a new process is started.
upgrade)
  if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
  then
    n=$TIMEOUT
    while test -s $OLD_PIN && test $n -ge 0
    do
      printf '.' && sleep 1 && n=$(( $n - 1 ))
    done
    echo

    if test $n -lt 0 && test -s $OLD_PIN
    then
      echo >&2 "$OLD_PIN still exists after $TIMEOUT seconds"
      exit 1
    fi
    exit 0
  fi
  echo >&2 "Couldn't upgrade, starting '$CMD' instead"
  run "$CMD"
  ;;

# A basic status checker. Just checks if the master process is responding to
# the `kill` command.
status)
  sig 0 && echo >&2 "Process is running." && exit 0
  echo >&2 "Process is not running."
  ;;

# Reopen all logs owned by the master and all workers.
reopen-logs)
  sig USR1
  ;;
*)
  echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
  exit 1
  ;;
esac